import React, {useState} from 'react';
import {Badge, Calendar, Button, Modal, DatePicker, Select, Input, Space,FloatButton} from 'antd';
import './mytodolist.css';
import {CloseOutlined} from "@ant-design/icons";


const {Option} = Select;
/* exported events */
const App4 = () => {
    // 使用useState钩子定义组件的状态
    const [showModal, setShowModal] = useState(false); // 控制模态框的显示与隐藏
    const [selectedDate, setSelectedDate] = useState(null); // 选择的日期
    const [priority, setPriority] = useState(''); // 优先级
    const [todoText, setTodoText] = useState(''); // 待办事项的文本
    const [events, setEvents] = useState({}); // 存储所有事件的对象

    // 处理显示模态框的函数
    const showModalHandler = () => {
        setShowModal(true);
    };

    // 处理模态框取消按钮的函数
    const handleModalCancel = () => {
        setShowModal(false);
        setSelectedDate('');
        setPriority('');
        setTodoText('');
    };

    // 处理模态框确认按钮的函数
    const handleModalFinish = () => {
        if (!selectedDate || !priority || !todoText) {
            Modal.warning({
                title: '请补充完整待办事项',
                content: '日期、优先级和待办事项为必填项，请补充完整后再提交。'
            }
            );

            return;
        }
        // 格式化选择的日期
        const date = selectedDate.format('YYYY-MM-DD');
        // 创建一个副本来更新events对象
        const updatedEvents = {...events};
        // 如果该日期的事件列表不存在，则初始化为空数组
        updatedEvents[date] = updatedEvents[date] || [];
        // 创建一个新的事件对象
        const newEvent = {
            id: Date.now(),
            date,
            content: todoText,
            priority,
        };

        // 将新的事件对象添加到对应日期的事件列表中
        updatedEvents[date].push(newEvent);
        console.log(events)
        console.log(selectedDate)
        // 更新events对象的状态
        setEvents(updatedEvents);

        // 关闭模态框，并重置相关状态
        setShowModal(false);
        setSelectedDate('');
        setPriority('');
        setTodoText('');
        console.log(events)
    };

    // 处理点击删除按钮的函数
    const handleDelete = (date, id) => {
        // 创建一个副本来更新events对象
        const updatedEvents = {...events};
        // 找到对应事件的索引
        const index = updatedEvents[date].findIndex((event) => event.id === id);
        // 从事件列表中删除该事件
        updatedEvents[date].splice(index, 1);
        // 更新events对象的状态
        setEvents(updatedEvents);
    };

    // 渲染日期单元格的函数
    const dateCellRender = (value) => {
        // 格式化日期
        const date = value.format('YYYY-MM-DD');
        // 获取该日期的事件列表，如果不存在则为空数组
        const content = events[date] || [];

        return (
            <ul className="events">
                {/* 遍历事件列表，渲染每个事件 */}
                {content.map((event) => (
                    <span key={event.id}>
                        {/* 使用Badge组件显示事件的优先级和内容 */}


                            <link rel="stylesheet" type="text/css" href="mytodolist.css" />
                            <Space.Compact className="text">
                            <Badge  status={event.priority}/> {event.content}
                            </Space.Compact>
                            {/* 添加删除按钮 */}
                        &nbsp;
                            <Button type="link" className="delete"  onClick={() => handleDelete(date, event.id)}><CloseOutlined /></Button>
<br/>
                    </span>
                ))}
            </ul>
        );
    };

    return (
        <div>
            <div style={{position: 'absolute', top: '58px', right: '306px'}}>
                {/* 添加事件按钮 */}
                <FloatButton className={"FloatButton"} type="primary" onClick={showModalHandler} tooltip={<div>添加事件</div>} />

                {/* 模态框 */}
                <Modal title="添加事件" visible={showModal} onCancel={handleModalCancel} onOk={handleModalFinish}>
                    {/* 日期选择器 */}
                    <DatePicker
                        value={selectedDate}
                        onChange={(date) => setSelectedDate(date)}
                        style={{marginBottom: '10px', width: '100%'}}
                    />
                    {/* 优先级选择器 */}
                    <Select
                        placeholder="选择优先级"
                        value={priority}
                        onChange={(value) => setPriority(value)}

                        style={{marginBottom: '10px', width: '100%'}}
                    >
                        <Option value="error">高</Option>
                        <Option value="warning">中</Option>
                        <Option value="success">低</Option>
                    </Select>

                    <Input
                        value={todoText}
                        onChange={(e) => setTodoText(e.target.value)}
                        placeholder="输入待办事项"
                        style={{marginBottom: '10px', width: '100%'}}
                    />
                </Modal>

            </div>
            {/* 日历组件 */}
            <Calendar dateCellRender={dateCellRender}/>
        </div>

    );

};

export default App4;